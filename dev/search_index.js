var documenterSearchIndex = {"docs":
[{"location":"GettingStarted/#Get-started","page":"Getting Started","title":"Get started","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Example data acquired on a phantom can be downloaded here. There are available examples scripts and expected results to get started.","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"note: Note\nMRINavigator.jl is developed for and tested on data acquired with a specific set of parameters on Siemens scanners. The requirements are specified in the following paragraphs. The navigator-based correction may fail when used outside this domain.","category":"page"},{"location":"GettingStarted/#Data-requirements","page":"Getting Started","title":"Data requirements","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"The navigator based correction can only be applied on the raw data of a gradient echo acquisitions in MRD format. The gradient echo acquisition can be multi-echo or single-echo. The slices should be positioned axially (can be angulated) and one average per repetition should be used. The concatenation value should be set to one, meaning that the sequence repetition time (TR) shold be long enough to acquire one line in every slice. This is necessary to correctly identify and remove the reference data from the Siemens scans. The gradient echo acquisition must include a navigator readout through the center of k-space at the end of each TR. During the acquisition, it is advisable to collect the signal from a respiratory belt as a reference. This can be used to unwrap the navigator's phase estimates if phase wrapping is present.","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Other than the main acquisition, which is usually undersampled, a lower resolution, fully sampled scan is also necessary to compute the coils sensitivity maps and reconstruct the images. This low-resolution scan is also called a reference scan and should include only one echo. It is possible to extract a single echo from a multi echo acquisition using the selectEcho! function. ","category":"page"},{"location":"GettingStarted/#Data-reshaping","page":"Getting Started","title":"Data reshaping","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"All the data should be exported from the scanner in raw format. Then they should be converted to ISMRMRD format. Siemens TWIX data can be converted to ISMRMRD using siemenstoismrmrd. The example data are in ISMRMRD format and do no require any conversion. Data in ISMRMRD format can be loaded into the Julia framework. Conversion of data from other vendors has not been explicitly tested by the authors. The repiratory belt recording must be synchronised with the time stamps in the image acquisition (i.e resampled). Then they must be saved in a two-column vector (1:time [ms], 2:trace) in .mat format. Each repetition should be in a different file. The time should be expressed in seconds from the beginning of the day and contain time points before and after the image acquisition (at least 4 s).","category":"page"},{"location":"GettingStarted/#The-parameters-dictionary","page":"Getting Started","title":"The parameters dictionary","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Before calling the package functions, the relevant correction pipeline should be chosen and the parameters dictionary should be filled. Also the data paths and results paths need to be defined. For more details regarding the correction pipelines and parameters read the Navigator-based correction pipelines page. All the information necessary to apply the corrections is defined in a dictionary. This includes all the file paths and analysis parameters. The user can also add items to the dictionary if needed. Here is an example of a params dictionary:","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"params = Dict{Symbol,Any}()\nparams[:subject] = \"sub_01\"\nparams[:slices] = [1,2] # type nothing for all slices\nparams[:echoes] = [3,4] # type nothing for all echoes\nparams[:rep] = 0\nparams[:comp_sensit] = true\nparams[:comp_centerline] = true\nparams[:trust_SCT] = false\nparams[:use_centerline] = true\nparams[:corr_type] = \"FFT_unwrap\"\nparams[:FFT_interval] = 35 # millimetres\nparams[:mask_thresh] = 0.13\nparams[:root_path] = \"/Users/me/my_data/\"\n\nparams[:label] = params[:corr_type] * \"_rep_\" * string(params[:rep])\nparams[:path_imgData] = params[:root_path] * params[:subject] * \"/h5/gre2D.h5\"\nparams[:path_refData] = params[:root_path] * params[:subject] * \"/h5/gre2D_Ref.h5\"\nparams[:path_niftiMap] = params[:root_path] * params[:subject] * \"/Nifti/gre2D_Ref.nii\"\nparams[:path_centerline] = params[:root_path] * params[:subject] * \"/Nifti/\"\nparams[:path_physio] = params[:root_path] * params[:subject] * \"/Physiological_trace/belt_reco_rep\"\nparams[:path_sensit] = params[:root_path] * params[:subject] * \"/Results/senseMap_GRE.jld2\"\nparams[:path_noise] = params[:root_path] * params[:subject] * \"/Results/noisemat.jld2\"\nparams[:path_results] = params[:root_path] * params[:subject] * \"/Results/\"\nparams[:file_name] = \"gre2D\"","category":"page"},{"location":"GettingStarted/#User-examples","page":"Getting Started","title":"User examples","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Three user examples are available in the folder user examples:","category":"page"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Compact: runs all the selected pipeline automatically but it is not customizable and not amenable to debugging.\nSemi-Compact: allows for some level of customization and it is easy to debug.\nComplete: requires more knowledge of the data structures but it is flexible and adaptable.","category":"page"},{"location":"GettingStarted/#Disclaimer","page":"Getting Started","title":"Disclaimer","text":"","category":"section"},{"location":"GettingStarted/","page":"Getting Started","title":"Getting Started","text":"Siemens data only were used to develop MRINavigator. All the functions to adjust the data before running the pipeline (e.g., the function to extract the navigator profiles or to remove the reference profiles) have been tested on Siemens data only. There is no guarantee that all of these functions are needed and will work on other vendors data. Other vendors users should convert the raw data in ISMRMRD format and when loading these into the Julia framework they should make sure that all the needed information is present. Please start from the complete user example if doing this. The functions to compute and apply the corrections should then work correctly.","category":"page"},{"location":"Pipelines/#Navigator-based-correction-pipelines","page":"Pipelines","title":"Navigator-based correction pipelines","text":"","category":"section"},{"location":"Pipelines/","page":"Pipelines","title":"Pipelines","text":"Standard navigator processing that has been developed for brain imaging is not sufficiently robust in the spinal cord due to the following:","category":"page"},{"location":"Pipelines/","page":"Pipelines","title":"Pipelines","text":"Higher in-plane variability in the field distribution\nSignal-to-noise ratio (SNR) is lower\nLarger variations in signal contribution from different receiver coils compared to most anatomical regions","category":"page"},{"location":"Pipelines/","page":"Pipelines","title":"Pipelines","text":"To face these challenges, we developed:","category":"page"},{"location":"Pipelines/","page":"Pipelines","title":"Pipelines","text":"SNR weighted averaging of the navigator profile\nmean phase removal to recenter the phase distribution and reduce wrapping\nA fast Fourier transform (FFT) and spatial region selection step. This consists of applying a one-dimensional Fourier transform to each navigator profile and considering for the phase estimate only the data points in a certain spatial interval centered on the spinal cord.\nPhase unwrapping function for the navigator estimates using the respiratory trace recording.","category":"page"},{"location":"Pipelines/","page":"Pipelines","title":"Pipelines","text":"These features are combined in multiple pipelines as shown in the figure.","category":"page"},{"location":"Pipelines/","page":"Pipelines","title":"Pipelines","text":"(Image: Pipelines)","category":"page"},{"location":"Pipelines/","page":"Pipelines","title":"Pipelines","text":"The available pipelines are:","category":"page"},{"location":"Pipelines/","page":"Pipelines","title":"Pipelines","text":"k_nav is the k-space navigator processing commonly used for brain imaging, optimized with SNR weighted averaging and mean phase removal.\nFFT_nav that includes an additional FFT and spatial region selection step compared to k_nav.\nunwrap includes the phase unwrapping algorithm and makes use of the respiratory belt recordings.","category":"page"},{"location":"Pipelines/","page":"Pipelines","title":"Pipelines","text":"MRINavigator is designed to be flexible and multiple analysis parameters are tuneable. It is possible to select the correction pipeline and parameters using the params dictionary. For more information check the Get started or API pages. Alternatively start julia from the command line, and type ? to enter the help REPL mode. Then enter","category":"page"},{"location":"Pipelines/","page":"Pipelines","title":"Pipelines","text":"help?> defaultNavParams","category":"page"},{"location":"Pipelines/","page":"Pipelines","title":"Pipelines","text":"Listed below are the main features and parameters the user can select and modify:","category":"page"},{"location":"Pipelines/","page":"Pipelines","title":"Pipelines","text":"The Spinal cord toolbox (SCT) can be used to locate the spinal cord centerline position (params[:comp_centerline] = true). To do this the reference data, which are fully sampled, are reconstructed combining the coils, and saved in NIfTI format (params[:reconstruct_map] = true).  The user can also manually locate the centerline if the automatic algorithm fails, selecting params[:trust_SCT] = false. Alternatively, the center of the image will be used (params[:use_centerline] = false).\nThe interval width for the region selection after the FFT step can be adjusted (params[:FFT_interval] = type number in millimeters).\nThe unwrap function can be applied both to the FFT and the k nav pipelines. To do this type params[:corr_type] = \"FFT_unwrap\" or params[:corr_type] = \"knav_unwrap\".","category":"page"},{"location":"#MRINavigator","page":"Home","title":"MRINavigator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Magnetic Resonance Imaging Navigator-based corrections","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\",\n    \"GettingStarted.md\",\n    \"Pipelines.md\",\n    \"API.md\"\n]\nDepth = 2","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MRINavigator provides multiple navigator-based correction pipelines for Magnetic Resonance (MR) images. These aim at demodulating time-dependent field variations present in multi echo-gradient echo acquisitions. The package was developed with a focus on spinal cord imaging, but it can be used for multiple imaging applications. The corrections are to be applied to the raw data before the image reconstruction. MRIReco.jl can be used to reconstruct the images.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nMRINavigator.jl is newly published, and any feedback is welcome. Please report any bugs or feature requests as an Issue in Github.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThis toolbox comes with no warranty. It is not intended for clinical or diagnostic use.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Start julia and open the package manager REPL mode by entering ]. Then enter","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add MRINavigator","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will install MRINavigator and all its dependencies. If you want to develop MRINavigator itself you can checkout MRINavigator locally as usual by calling","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> dev MRINavigator","category":"page"},{"location":"","page":"Home","title":"Home","text":"More information on how to develop a package can be found in the Julia documentation.","category":"page"},{"location":"#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use some package functionalities, external softwares are necessary.  These include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Spinal Cord Toolbox (SCT)\nFSLeyes","category":"page"},{"location":"","page":"Home","title":"Home","text":"Using these toolboxes should improve the correction outcome of the pipelines including a Fourier transform (FFT) step. Use of SCT and FSLEyes is only relevant for spinal cord acquisitions. For additional information read the Get started and Navigator-based correction pipelines sections.","category":"page"},{"location":"#Testing-MRINavigator","page":"Home","title":"Testing MRINavigator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To make sure that the package is correctly installed, start julia from the command line, type ] to enter the package manager REPL mode. Then enter","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> test MRINavigator","category":"page"},{"location":"#Updating-MRINavigator","page":"Home","title":"Updating MRINavigator","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To update MRINavigator to the latest version, start julia from the command line, type ] to enter the package manager REPL mode. Then enter","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> update MRINavigator","category":"page"},{"location":"#Navigator-based-correction","page":"Home","title":"Navigator-based correction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Multi-echo gradient-echo (GRE) sequences are commonly acquired both in research and clinical practice. However, one of their main limitations is the sensitivity to field instabilities both in space and time. Indeed, for the signal spatial encoding to be effective, a background homogeneous field in time and space is required. Time-varying background fields can lead to phase modulation between k-space lines, and therefore TE-dependent ghosting artefacts. Navigator readouts in the k-space center can be used to measure the intensity of the field fluctuations,enabling correct demodulation of the acquired signal before image reconstruction. The standard navigator-based correction was developed for brain imaging and it is not robust when applied in other areas e.g. the spinal cord. When failing, the correction can even exacerbate the problem. This package provides optimized post-processing pipelines to correct for dynamic field instabilities in GRE sequences. For additional information read the Navigator-based correction pipelines section.","category":"page"},{"location":"#Plotting","page":"Home","title":"Plotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MRINavigator does not depend upon a particular plotting package since there are various plotting packages available in Julia. Feel free to use your package of choice. ","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package uses the reconstruction functions and data structures available in MRIReco.jl. T. Knopp and M. Grosser (2021). MRIReco.jl: An MRI Reconstruction Framework written in Julia. Magnetic Resonance in Medicine. 2021.","category":"page"},{"location":"#Citing-this-work","page":"Home","title":"Citing this work","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use MRINavigator in you research please cite the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Optimised navigator correction of physiological field fluctuations in multi-echo GRE of the lumbar spinal cord at 3T. L Beghini, G David, M D Liechti, S Büeler, S J Vannesjo. 2023. Proceedings of the International Society for Magnetic Resonance in Medicine (ISMRM).","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"This page contains documentation of the public API of MRINavigator. In the Julia REPL one can access this documentation by entering the help mode with ? and then writing the function for which the documentation should be shown.  For example: ? findCenterline","category":"page"},{"location":"API/#Run-compact-pipeline","page":"API","title":"Run compact pipeline","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"MRINavigator.defaultNavParams\nMRINavigator.runNavPipeline\nMRINavigator.saveNoise\nMRINavigator.loadRawData\nMRINavigator.convertRawToAcq","category":"page"},{"location":"API/#MRINavigator.defaultNavParams","page":"API","title":"MRINavigator.defaultNavParams","text":"params = defaultNavParams()\n\nDefine default parameters for data loading, navigator correction and image reconstruction.\n\nDefault parameters options are\n\nslices::Union{Nothing, Vector}    - a vector containing the number of the slices to be loaded, nothing means all slices\nechoes::Union{Nothing, Vector}    - a vector containing the number of the echoes to be loaded, nothing means all echoes\nrep::Int                          - repetition to be loaded, the first repetition is 0. It is mandatory to select one\ncomp_sensit::Bool                 - compute the sensitivity maps using the reference scan\ncomp_centerline::Bool             - use the Spinal Cord Toolbox (SCT) to find the centerlne position\ntrust_SCT::Bool                   - trust SCT or display the resutls and wait for user feedback with the julia REPL\nuse_centerline::Bool              - use the spinal cord centerline information in the navigator-based correction\ncorr_type::String                 - correction type. Options: \"none\", \"knav\", \"FFT\", \"FFT_unwrap\"\nFFT_interval::String              - interval in mm to be considered for the FFT based approach\nmask_thresh::String               - masking threshold: increase for reduced mask size, decrease for extended mask size\n\nAdditional required parameters are\n\npath_imgData::String              - path to the image data file in ISMRMRD format\npath_refData::String              - path to the reference data file in ISMRMRD format\npath_sensit::String               - path to the file where the sensitivity maps will be saved. The file extension must be .mat\npath_noise::String                - path to the file where the noise acquisition will be saved. The file extension must be .jld2\npath_results::String              - path to the results folder\n\nAdditional optional parameters are\n\npath_niftiMap::String             - path to the file where the reconstructed reference data will be saved in nifti format. The file extension must be .nii\npath_centerline::String           - path to the folder where the Spinal Cord Toolbox (SCT) centerline results will be saved\npath_physio::String              - path to the physiological trace recording in .mat format. The variable should be a two columns vector (1:time [ms], 2:trace) called data.                                       The time should be expressed in seconds from the beginning of the day and contain time points before and after the image acquisiton (at least 4 s).\n\nISMRMRD reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.26089 SCT reference: https://spinalcordtoolbox.com\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.runNavPipeline","page":"API","title":"MRINavigator.runNavPipeline","text":"runNavPipeline(params::Dict{Symbol, Any})\n\nRun the navigator pipeline. Return reconstructed image and navigator correction output (check NavCorr!).\n\nArguments\n\nparams::Dict{Symbol, Any} - MRINavigator parameter structure, check defaultNavParams() for info\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.saveNoise","page":"API","title":"MRINavigator.saveNoise","text":"saveNoise(path_imgData::String, path_noise::String)\n\nExtract the noise acquisition form the image data and save it.   Call ExtractNoiseData!, check this function for more info.\n\nArguments\n\npath_imgData::String - path to the ISMRMRD file containing the image data\npath_noise::String - path where the noise file will be saved\n\nISMRMRD reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.26089\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.loadRawData","page":"API","title":"MRINavigator.loadRawData","text":"loadRawData(params::Dict{Symbol, Any})\n\nLoad the raw data file saved in ISMRMRD format in julia using MRIReco.jl Call ExtractNoiseData!, OrderSlices!, ReverseBipolar!, RemoveRef!. Check the specific functions for info.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792 ISMRMRD reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.26089\n\nArguments\n\nparams::Dict{Symbol, Any} - MRINavigator parameter structure, check defaultNavParams() for info\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.convertRawToAcq","page":"API","title":"MRINavigator.convertRawToAcq","text":"convertRawToAcq(rawData::::RawAcquisitionData)\n\nConvert raw data to acquisition data using MRIReco.jl, then apply small adjustments. Return acquisition data structure.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#Coil-sensitivity-maps","page":"API","title":"Coil sensitivity maps","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"MRINavigator.CompSensit\nMRINavigator.CompRoughMask\nMRINavigator.ResizeSensit!\nMRINavigator.CompResizeSaveSensit","category":"page"},{"location":"API/#MRINavigator.CompSensit","page":"API","title":"MRINavigator.CompSensit","text":"sensit = CompSensit(acq::AcquisitionData, thresh = 0.13)\n\nCompute the coils sensitivity maps with masking tuned for spinal cord imaging. Use MRICoilSensitivities.jl from MRIReco.jl alternatively.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nacqData::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\ntresh::Float64 - masking threshold: increase for reduced mask size, decrease for extended mask size\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.CompRoughMask","page":"API","title":"MRINavigator.CompRoughMask","text":"mask = CompRoughMask(acq::AcquisitionData, slices::Int64, thresh)\n\nReturn a rough mask for multiple slices that may not be homogeneous.\n\nArguments\n\nacqData::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nslices::Int64 - number of slices in acquisition data\ntresh::Float64 - masking threshold: increase for reduced mask size, decrease for extended mask size\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ResizeSensit!","page":"API","title":"MRINavigator.ResizeSensit!","text":"sensit = ResizeSensit!(sensit::Array{Complex{T},4}, acqMap::AcquisitionData, acqData::AcquisitionData)\n\nResize and resample the coil sensitivity map to match the acquisition data field of view and resolution. This step is needed for the image reconstruction to run. Image data and reference data must have the same slice center.\n\nArguments\n\nsensit::Array{Complex{T},4} - output of CompSensit(acq::AcquisitionData, thresh)\nacqMap::RawAcquisitionData - acquisition data structure obtained converting raw reference data with MRIReco.jl\nacqData::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.CompResizeSaveSensit","page":"API","title":"MRINavigator.CompResizeSaveSensit","text":"CompResizeSaveSensit(acqMap::AcquisitionData, acqData::AcquisitionData, path_sensit::String)\n\nCompute, resize to the image data dimension and save the coils sensitivity maps with masking tuned for spinal cord imaging. Use MRICoilSensitivities.jl from MRIReco.jl alternatively.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nacqMap::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nacqData::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\ntresh::Float64 - masking treshold: increase for reduced mask size, decrease for extended mask size\n\n\n\n\n\n","category":"function"},{"location":"API/#Find-centerline","page":"API","title":"Find centerline","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"MRINavigator.findCenterline\nMRINavigator.ReconstructMap\nMRINavigator.ReconstructSaveMap\nMRINavigator.callSCT\nMRINavigator.comp_centerline_pos","category":"page"},{"location":"API/#MRINavigator.findCenterline","page":"API","title":"MRINavigator.findCenterline","text":"findCenterline(params::Dict{Symbol, Any})\n\nReconstruct the reference data, call spinal cord toolbox and find spinal cord centerline. If trust_SCT = false in the parameters dictionary the user interaction is required in the Julia REPL.\n\nArguments\n\nparams::Dict{Symbol, Any} - paramerters dictionary\n\nSCT reference: https://spinalcordtoolbox.com\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ReconstructMap","page":"API","title":"MRINavigator.ReconstructMap","text":"ReconstructMap(path_ref::String)\n\nReconstruct the coil sensitivity map using the MRIReco.jl function.\n\nArguments\n\npath_rep::String - path of reference data in ISMRMRD format\nthresh::Float64 - masking threshold: increase for reduced mask size, decrease for extended mask size\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792 ISMRMRD reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.26089\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ReconstructSaveMap","page":"API","title":"MRINavigator.ReconstructSaveMap","text":"ReconstructSaveMap(path_nifti::String, path_ref::String, thresh::Float64)\n\nReconstruct the coil sensitivity map using the MRIReco.jl function and save it in nifti format without spatial information.\n\nArguments\n\npath_nifti::String - path of the nifti file. The file must have .nii extension\npath_rep::String - path of reference data in ISMRMRD format\nthresh::Float64 - masking threshold: increase for reduced mask size, decrease for extended mask size\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792 ISMRMRD reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.26089\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.callSCT","page":"API","title":"MRINavigator.callSCT","text":"callSCT(params::Dict{Symbol, Any})\n\nCall spinal cord toolbox and find spinal cord centerline. If trust_SCT = false in the parameters dictionary the user interaction is required in the Julia REPL\n\nArguments\n\nparams::Dict{Symbol, Any} - paramerters dictionary\n\nSCT reference: https://spinalcordtoolbox.com\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.comp_centerline_pos","page":"API","title":"MRINavigator.comp_centerline_pos","text":"centerline = comp_centerline_pos(addData::additionalNavInput)\n\nConvert and return centerline position from the reference data cordinate to the acquisition data coordinates (number of voxels).\n\nArguments\n\naddData::additionalNavInput - mandatory additional data structure obtained with the constructor: additionalNavInput\n\n\n\n\n\n","category":"function"},{"location":"API/#Utils","page":"API","title":"Utils","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"MRINavigator.Reconstruct\nMRINavigator.directreco\nMRINavigator.niftiSaveImg","category":"page"},{"location":"API/#MRINavigator.Reconstruct","page":"API","title":"MRINavigator.Reconstruct","text":"img = Reconstruct(acqd::AcquisitionData, sensit::Array{Complex{T},4}, noisemat::Union{Array{Complex{T}},Nothing} = nothing)\n\nCall MRIReco.jl reconstruction function and return reconstructed image. Only single repetition in input.\n\nArguments\n\nacqData::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nsensit::Array{Complex{T},4} - coil sensitivity map matrix computed with CompSensit(acq::AcquisitionData, thresh = 0.135)\nnoisemat::Union{Array{Complex{T}},Nothing} = nothing - noise data extracted from the raw data structure with ExtractNoiseData!(rawData::RawAcquisitionData)\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.directreco","page":"API","title":"MRINavigator.directreco","text":"img = directreco(acq::AcquisitionData)\n\nCall MRIReco.jl reconstruction function and return reconstructed image. Reconstruct coils separately.\n\nArguments\n\nacqData::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.niftiSaveImg","page":"API","title":"MRINavigator.niftiSaveImg","text":"niftiSaveImg(img::AbstractArray{T}, acq::AcquisitionData, path_nifti::String)\n\nSave the module of the reconstruction output in nifti format, without spatial information.\n\nArguments\n\nimg::AbstractArray{T} - reconstruction output\nacq::AcquisitionData - reconstruction input (MRIReco.jl) needed for saving the voxel dimension\npath_nifti::String - path of the nifti file. The file must have .nii extension\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#Navigator-correction","page":"API","title":"Navigator correction","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"MRINavigator.NavCorr!\nMRINavigator.wrap_corr!\nMRINavigator.find_wrapped\nMRINavigator.TE_corr!\nMRINavigator.apply_corr!","category":"page"},{"location":"API/#MRINavigator.NavCorr!","page":"API","title":"MRINavigator.NavCorr!","text":"navOutput = NavCorr!(nav::Array{Complex{T}, 4}, acqData::AcquisitionData, params::Dict{Symbol, Any}, addData::additionalNavInput) where {T}\n\nCompute the navigator-based correction and apply it to the acquisition data. Multiple pipelines are available: \"knav\", \"FFT\" and \"FFTunwrap\". Return navigator trace, spinal cord centerline in the reconstructed image coordinates,  Correlation between navigator and belt data for each slice and position of wrapped points for each slices. Please choose the pipeline using the corrtype filed in the params dictionary.\n\nArguments\n\nnav::Array{Complex{T}, 4} - navigator profiles obtained with the ExtractNavigator function\nacqData::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nparams::Dict{Symbol, Any} - navigator correction paramerters dictionary\naddData::additionalNavInput - mandatory additional data structure obtained with the constructor: additionalNavInput\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.wrap_corr!","page":"API","title":"MRINavigator.wrap_corr!","text":"wrap_corr!(nav::Array{Float64, 4}, wrapped_points::Array{Int8, 2}, correlation::Union{Array{Float64, 1}, Matrix{Float64}}, slices::Int64)\n\nUnwrap the wrapped points identified with the find_wrapped funtion. These functions can be used only if physiological recording is available.\n\nArguments\n\nnav::Array{T, 4} - phase estimates obtained from the navigator data\nwrapped_points::Array{Int8, 2} - position of the wrapped points, output of find_wrapped\ncorrelation::Union{Array{Float64, 1} - correlation values between the physiological recording the navigator estimates for each slice. Output of find_wrapped\nslices::Int64 - number of slices\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.find_wrapped","page":"API","title":"MRINavigator.find_wrapped","text":"find_wrapped(nav::Array{Float64, 4}, nav_time::Array{Float64, 2}, trace::Array{Float64, 2}, slices::Int64)\n\nIdentify the position of the wrapped points in the navigator phase estimates. The respiratory belt recording is necessary. Return the position of the wrapped points, the correlation between each navigator slice and the trace data, the aligned and interpolated trace data.\n\nArguments\n\nnav::Array{Float64, 4}      - navigator phase estimates\nnav_time::Array{Float64, 2} - navigator data timestamps in ms from the beginning of the day, for each slice\ntrace::Array{Float64, 2}    - physiological trace recording. Two columns vector (1:time [ms], 2:trace). The first column contains the timestamps in ms from the beginning of the day.                                   Include time points before and after the image acquisition (at least 2 s).\nslices::Int64               - number of slices\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.TE_corr!","page":"API","title":"MRINavigator.TE_corr!","text":"nav = TE_corr!(nav::Array{T, 4}, acqd::AcquisitionData, dt_nav::Float64, TE_nav::Float64, numsamples::Int64, numechoes::Int64) where {T}\n\nCompute the phase value for the navigator correction basing on the exact acquisition time of each data sample in the line and for each echo. Return a four-dimensional navigator array.\n\nArguments\n\nnav::Array{T, 4} - phase estimates obtained from the navigator data\nacqData::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\ndt_nav::Float64 - time interval between two samples in the frequency encoding direction\nTE_nav::Float64 - echo time of the navigator readout\nnumsamples::Int64 - number of samples for each profile\nnumechoes::Int64 - number of echoes\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.apply_corr!","page":"API","title":"MRINavigator.apply_corr!","text":"apply_corr!(nav::Array{T, 4}, acqd::AcquisitionData, numechoes::Int64, numlines::Int64, numsamples::Int64, numslices::Int64) where {T}\n\nApply the navigator-based correction to the acquisition data structure obtained loading the raw data with MRIReco.jl. After applying the correction the image should be reconstructed. Use the reconstruct function.\n\nArguments\n\nnav::Array{T, 4} - phase estimates obtained from the navigator data\nacqd::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nnumechoes::Int64 - number of echoes\nnumlines::Int64 - number of lines (profiles) for each slice and echo\nnumsamples::Int64 - number of samples for each profile\nnumslices::Int64 - number of slices\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#Adjust-data","page":"API","title":"Adjust data","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":" MRINavigator.OrderSlices!\n MRINavigator.ExtractFlags\n MRINavigator.ExtractNoiseData!\n MRINavigator.ReverseBipolar!\n MRINavigator.RemoveRef!\n MRINavigator.CopyTE!\n MRINavigator.AdjustSubsampleIndices!\n MRINavigator.ExtractNavigator\n MRINavigator.selectEcho!\n MRINavigator.selectSlice!\n MRINavigator.additionalNavInput","category":"page"},{"location":"API/#MRINavigator.OrderSlices!","page":"API","title":"MRINavigator.OrderSlices!","text":"OrderSlices!(rawData::RawAcquisitionData)\n\nSpatially order the slices in the MRIReco.jl raw data structure. The slices are ordered basing on the position coordinates saved in each profile. If these are not present the slices can not be ordered.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ExtractFlags","page":"API","title":"MRINavigator.ExtractFlags","text":"flags = ExtractFlags(rawData::RawAcquisitionData)\n\nExtract the acquisition flags from the MRIReco.jl raw data profiles. Return a 31-element vector for each profile.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ExtractNoiseData!","page":"API","title":"MRINavigator.ExtractNoiseData!","text":"noisemat = ExtractNoiseData!(rawData::RawAcquisitionData, flags::Array{Int64})\n\nExtract and return the noise acquisition from the MRIReco.jl raw data. The noise acquisition is usually the first profile with slice = 0, contrast = 0, repetition = 0. The noise profile should have the 19th flag element equal to 1. Check this with ExtractFlags if errors occur.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ReverseBipolar!","page":"API","title":"MRINavigator.ReverseBipolar!","text":"ReverseBipolar!(rawData::RawAcquisitionData)\n\nReflect the MRIReco.jl raw data profiles for bipolar acquisition.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.RemoveRef!","page":"API","title":"MRINavigator.RemoveRef!","text":"RemoveRef!(rawData::RawAcquisitionData, slices::Union{Vector{Int64}, Nothing}, echoes::Union{Vector{Int64}, Nothing})\n\nRemove reference data from acquisitions with phase stabilization on Siemens scanners. To be applied before the navigator-based correction. Necessary when the reference data is acquired before the image data. Make sure that this is needed on your data checking the time stamps. For Siemens: It is possible to read raw data with mapVBVD in Matlab. The reference data to be removed is called phasestabRef in mapVBVD. Not robust for sequences with concatenations > 1. Not robust to repeated calls, modifies rawData.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792 mapVBVD reference: https://github.com/CIC-methods/FID-A/blob/master/inputOutput/mapVBVD/README.md\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.CopyTE!","page":"API","title":"MRINavigator.CopyTE!","text":"CopyTE!(rawData::RawAcquisitionData, acqData::AcquisitionData)\n\nCopy the TE values from the MRIReco.jl raw data structure to the acquisition data structure.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\nacqData::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.AdjustSubsampleIndices!","page":"API","title":"MRINavigator.AdjustSubsampleIndices!","text":"AdjustSubsampleIndices!(acqData::AcquisitionData)\n\nAdd subsamples indices in the MRIReco.jl acquisition data structure. Needed when converting data not acquired in the first repetition.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nacqData::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ExtractNavigator","page":"API","title":"MRINavigator.ExtractNavigator","text":"(nav, nav_time) = ExtractNavigator(rawData::RawAcquisitionData, slices::Union{Vector{Int64}, Nothing})\n\nExtract the navigator profiles from the MRIReco.jl raw data structure. These are registered with the same indices (contract, slice, encoding step) as the image data for the first echo time. Return a navigator array and a navigator time array. The navigator array has four dimensions in the following order: k-space samples, coils, k-space lines, slices. Effective only if the navigator profile was acquired after the first image profile.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.selectEcho!","page":"API","title":"MRINavigator.selectEcho!","text":"SelectEcho!(acqd, idx_echo)\n\nExtract one or more echoes from the acquisition data structure\n\nArguments\n\nacqd::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nidx_echo::Vector{Int64} - vector containing the indexes of the echoes to be selected (starting from 0)\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.selectSlice!","page":"API","title":"MRINavigator.selectSlice!","text":"SelectSlice!(acqd, nav, nav_time, idx_slice)\n\nExtract one or more echoes from the acquisition data structure\n\nArguments\n\nacqd::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nidx_slice::Vector{Int64} - vector containing the indexes of the slices to be selected (starting from 0, downer slice)\n\nOptional arguments with default value = nothing\n\nnav::Union{Array{Complex{T}, 4}, Nothin} = nothing - navigator profiles obtained with the ExtractNavigator function\nnav_time::Union{Array{Complex{Float32}, 2}, Nothing} - time stamps for the navigator data obtained with ExtractNavigator (in ms from the beginning of the day)\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.additionalNavInput","page":"API","title":"MRINavigator.additionalNavInput","text":"Data = additionalNavInput(\n    noisemat::Array{Complex{Float32}, 2},\n    rawData::RawAcquisitionData,\n    acqData::AcquisitionData,\n    acqMap::Union{AcquisitionData, Nothing} = nothing,\n    nav_time::Union{Array{Complex{Float32}, 2}, Nothing} = nothing,\n    trace::Union{Matrix{Float64}, Nothing} = nothing,\n    centerline::Union{Vector{Float64}, Nothing} = nothing)\n\nConstruct the additional data structure that is needed as input to navCorr!\n\nArguments\n\nnoisemat::Array{Complex{Float32}, 2} - noise data obtained with ExtractNoiseData!\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\nacqData::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\n\nOptional arguments with default value = nothing\n\nacqMap::Union{AcquisitionData, Nothing} = nothing       - acquisition data structure obtained converting reference data with MRIReco.jl\nnav_time::Union{Array{Complex{Float32}, 2}, Nothing}    - time stamps for the navigator data obtained with ExtractNavigator (in ms from the beginning of the day)\ntrace::Union{Matrix{Float64}, Nothing}                  - respiratory trace time stamps and values in matrix with two colunms (1:time [ms], 2:trace).                                                               Include time points before and after the image acquisition (at least 2 s).\ncenterline::Union{Vector{Float64}, Nothing}             - coordinates of the spinal cord ceterline obtained with callSCT\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"type"}]
}
