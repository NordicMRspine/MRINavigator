var documenterSearchIndex = {"docs":
[{"location":"GettingStarted/#Eplain-here-how-to-get-started","page":"Getting Started","title":"Eplain here how to get started","text":"","category":"section"},{"location":"Pipelines/#Explain-here-the-pipleines","page":"Pipelines","title":"Explain here the pipleines","text":"","category":"section"},{"location":"#MRINavigator","page":"Home","title":"MRINavigator","text":"","category":"section"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\",\n    \"Pipelines.md\",\n    \"GettingStarted.md\",\n    \"API.md\"\n]\nDepth = 2","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MRINavigator provides ...","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"This page contains documentation of the public API of MRINavigator. In the Julia REPL one can access this documentation by entering the help mode with ? and then writing the function for which the documentation should be shown.","category":"page"},{"location":"API/#Run-compact-pipeline","page":"API","title":"Run compact pipeline","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"MRINavigator.defaultNavParams\nMRINavigator.runNavPipeline\nMRINavigator.saveNoise\nMRINavigator.loadRawData\nMRINavigator.convertRawToAcq","category":"page"},{"location":"API/#MRINavigator.defaultNavParams","page":"API","title":"MRINavigator.defaultNavParams","text":"params = defaultNavParams()\n\nDefine default parameters for data loading, navigator correction and image reconstruction.\n\nDefault parameters options are\n\nslices::Union{Nothing, Vector}    - number of the slices to be loaded, nothing means all slices\nechoes::Union{Nothing, Vector}    - number of the echoes to be loaded, nothing means all echoes\nrep::Int                          - repetition to be loaded, the first repetition is 0. It is mandatory to select one\ncomp_sensit::Bool                 - compute the sensitivity maps using the reference scan\ncomp_centerline::Bool             - use the Spinal Cord Toolbox (SCT) to find the centerlne position\ntrust_SCT::Bool                   - trust SCT or display the resutls and wait for user feedback with the julia REPL\nuse_centerline::Bool              - use the spinal cord centerline information in the navigator-based correction\ncorr_type::String                 - correction type. Options: \"none\", \"knav\", \"FFT\", \"FFT_unwrap\"\nFFT_interval::String              - interval in mm to be considered for the FFT based approach\n\nAdditional required parameters are\n\npath_imgData::String              - path to the image data file in ISMRMRD format\npath_refData::String              - path to the reference data file in ISMRMRD format\npath_sensit::String               - path to the file where the sensitivity maps will be saved. The file extension must be .mat\npath_noise::String                - path to the file where the noise acquisition will be saved. The file extension must be .jld2\npath_results::String              - path to the results folder\n\nAdditional optional parameters are\n\npath_niftiMap::String             - path to the file where the reconstructed reference data will be saved in nifti format. The file extension must be .nii\npath_centerline::String           - path to the folder where the Spinal Cord Toolbox (SCT) centerline results will be saved\npath_physio::String              - path to the physiological trace recording in .mat format. The variable should be a two columns vector (1:time [ms], 2:trace).                                       The time should be expressed in seconds from the beginning of the day and contains time points befroe and after the image acquisiton (at least 2 s).\n\nISMRMRD reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.26089 SCT reference: https://spinalcordtoolbox.com\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.runNavPipeline","page":"API","title":"MRINavigator.runNavPipeline","text":"runNavPipeline(params::Dict{Symbol, Any})\n\nRun the navigator pipeline. Return reconstructed image and navigaotr correction output (check NavCorr!).\n\nArguments\n\nparams::Dict{Symbol, Any} - MRINavigator parameter structure, check defaultNavParams() for info\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.saveNoise","page":"API","title":"MRINavigator.saveNoise","text":"saveNoise(path_imgData::String, path_noise::String)\n\nExtract the noise acquisition form the image data and save it.   Call ExtractNoiseData!, check this function for more info.\n\nArguments\n\npath_imgData::String - path to the ISMRMRD file containing the image data\npath_noise::String - path where the noise file will be saved\n\nISMRMRD reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.26089\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.loadRawData","page":"API","title":"MRINavigator.loadRawData","text":"loadRawData(params::Dict{Symbol, Any})\n\nLoad the raw data file saved in ISMRMRD format in julia using MRIReco.jl Call ExtractNoiseData!, OrderSlices!, ReverseBipolar!, RemoveRef!. Check the specific functions for info.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792 ISMRMRD reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.26089\n\nArguments\n\nparams::Dict{Symbol, Any} - MRINavigator parameter structure, check defaultNavParams() for info\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.convertRawToAcq","page":"API","title":"MRINavigator.convertRawToAcq","text":"convertRawToAcq(rawData::::RawAcquisitionData)\n\nConvert raw data to acquisition data using MRIReco.jl, then apply small adjustments. Return acquisition data structure.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#Coil-sensitivity-maps","page":"API","title":"Coil sensitivity maps","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"MRINavigator.CompSensit\nMRINavigator.CompRoughMask\nMRINavigator.ResizeSensit!\nMRINavigator.CompResizeSaveSensit","category":"page"},{"location":"API/#MRINavigator.CompSensit","page":"API","title":"MRINavigator.CompSensit","text":"sensit = CompSensit(acq::AcquisitionData, thresh = 0.13)\n\nCompute the coils sensitivity maps with masking tuned for spinal cord imaging. Use MRICoilSensitivities.jl from MRIReco.jl alternatively.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nacqData::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\ntresh::Float64 - masking treshold: increase for reduced mask size, decrease for extended mask size\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.CompRoughMask","page":"API","title":"MRINavigator.CompRoughMask","text":"mask = CompRoughMask(acq::AcquisitionData, slices::Int64, thresh)\n\nReturn a rough mask for multiple slices that may not be homogeneous.\n\nArguments\n\nacqData::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nslices::Int64 - number of slices in acquisition data\ntresh::Float64 - masking treshold: increase for reduced mask size, decrease for extended mask size\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ResizeSensit!","page":"API","title":"MRINavigator.ResizeSensit!","text":"sensit = ResizeSensit!(sensit::Array{Complex{T},4}, acqMap::AcquisitionData, acqData::AcquisitionData)\n\nResize and resample the coil sensitivity map to match the acquisition data field of view and resolution. This step is needed for the image reconstruction to run. Image data and reference data must have the same slice center.\n\nArguments\n\nsensit::Array{Complex{T},4} - output of CompSensit(acq::AcquisitionData, thresh)\nacqMap::RawAcquisitionData - acquisition data structure obtained converting raw reference data with MRIReco.jl\nacqData::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.CompResizeSaveSensit","page":"API","title":"MRINavigator.CompResizeSaveSensit","text":"CompResizeSaveSensit(acqMap::AcquisitionData, acqData::AcquisitionData, path_sensit::String)\n\nCompute, resize to the image data dimension and save the coils sensitivity maps with masking tuned for spinal cord imaging. Use MRICoilSensitivities.jl from MRIReco.jl alternatively.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nacqMap::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nacqData::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\ntresh::Float64 - masking treshold: increase for reduced mask size, decrease for extended mask size\n\n\n\n\n\n","category":"function"},{"location":"API/#Find-centerline","page":"API","title":"Find centerline","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"MRINavigator.findCenterline\nMRINavigator.ReconstructMap\nMRINavigator.ReconstructSaveMap\nMRINavigator.callSCT\nMRINavigator.comp_centerline_pos","category":"page"},{"location":"API/#MRINavigator.findCenterline","page":"API","title":"MRINavigator.findCenterline","text":"findCenterline(params::Dict{Symbol, Any})\n\nReconstruct the reference data, call spinal cord toolbox and find spinal cord centerline. If trust_SCT = false in the parameters dictionary the user interaction is required in the Julia REPL.\n\nArguments\n\nparams::Dict{Symbol, Any} - paramerters dictionary\n\nSCT reference: https://spinalcordtoolbox.com\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ReconstructMap","page":"API","title":"MRINavigator.ReconstructMap","text":"ReconstructMap(path_ref::String)\n\nReconstruct the coil sensitivity map using the MRIReco.jl function.\n\nArguments\n\npath_rep::String - path of reference data in ISMRMRD format\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792 ISMRMRD reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.26089\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ReconstructSaveMap","page":"API","title":"MRINavigator.ReconstructSaveMap","text":"ReconstructSaveMap(path_nifti::String, path_ref::String)\n\nReconstruct the coil sensitivity map using the MRIReco.jl function and save it in nifti format without spatial informations.\n\nArguments\n\npath_nifti::String - path of the nifti file. The file must have .nii extension\npath_rep::String - path of reference data in ISMRMRD format\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792 ISMRMRD reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.26089\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.callSCT","page":"API","title":"MRINavigator.callSCT","text":"callSCT(params::Dict{Symbol, Any})\n\nCall spinal cord toolbox and find spinal cord centerline. If trust_SCT = false in the parameters dictionary the user interaction is required in the Julia REPL\n\nArguments\n\nparams::Dict{Symbol, Any} - paramerters dictionary\n\nSCT reference: https://spinalcordtoolbox.com\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.comp_centerline_pos","page":"API","title":"MRINavigator.comp_centerline_pos","text":"centerline = comp_centerline_pos(addData::additionalNavInput)\n\nConvert and return centerline position from the reference data cordinate to the acquisition data coordinates (number of voxels).\n\nArguments\n\naddData::additionalNavInput - mandatory additional data structure obtained with the constructor: additionalNavInput\n\n\n\n\n\n","category":"function"},{"location":"API/#Utils","page":"API","title":"Utils","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"MRINavigator.Reconstruct\nMRINavigator.directreco\nMRINavigator.niftiSaveImg","category":"page"},{"location":"API/#MRINavigator.Reconstruct","page":"API","title":"MRINavigator.Reconstruct","text":"img = Reconstruct(acqd::AcquisitionData, sensit::Array{Complex{T},4}, noisemat::Union{Array{Complex{T}},Nothing} = nothing)\n\nCall MRIReco.jl reconstruction function and return reconstructed image. Only single repetition in input.\n\nArguments\n\nacqData::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nsensit::Array{Complex{T},4} - coil sensitivity map matric computed with CompSensit(acq::AcquisitionData, thresh = 0.135)\nnoisemat::Union{Array{Complex{T}},Nothing} = nothing - noise data extracted from the raw datat structure with ExtractNoiseData!(rawData::RawAcquisitionData)\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.directreco","page":"API","title":"MRINavigator.directreco","text":"img = directreco(acq::AcquisitionData)\n\nCall MRIReco.jl reocnstruction function and return reconstructed image. Reconstruct coils separately.\n\nArguments\n\nacqData::RawAcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.niftiSaveImg","page":"API","title":"MRINavigator.niftiSaveImg","text":"niftiSaveImg(img::AbstractArray{T}, acq::AcquisitionData, path_nifti::String)\n\nSave the module of the reconstruction output in nifti format, without spatial information.\n\nArguments\n\nimg::AbstractArray{T} - reconstruction output\nacq::AcquisitionData - reconstruction input (MRIReco.jl) needed for saving the voxel dimension\npath_nifti::String - path of the nifti file. The file must have .nii extension\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#Navigator-correction","page":"API","title":"Navigator correction","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"MRINavigator.NavCorr!\nMRINavigator.wrap_corr!\nMRINavigator.find_wrapped\nMRINavigator.TE_corr!\nMRINavigator.apply_corr!","category":"page"},{"location":"API/#MRINavigator.NavCorr!","page":"API","title":"MRINavigator.NavCorr!","text":"navOutput = NavCorr!(nav::Array{Complex{T}, 4}, acqData::AcquisitionData, params::Dict{Symbol, Any}, addData::additionalNavInput) where {T}\n\nCompute the navigator-based correction and apply it to the acquisition data. Multiple pipelines are available: \"knav\", \"FFT\" and \"FFTunwrap\". Return navigator trace, spinal cord centerline in the reconstructed image coordinates,  Correlation between nagigator and belt data for each slice and position of wrapped points for each slices. Please choose the pipeline using the corrtype filed in the params dictionary.\n\nArguments\n\nnav::Array{Complex{T}, 4} - navigator profiles obtained with the ExtractNavigator function\nacqData::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nparams::Dict{Symbol, Any} - navigator correction paramerters dictionary\naddData::additionalNavInput - mandatory additional data structure obtained with the constructor: additionalNavInput\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.wrap_corr!","page":"API","title":"MRINavigator.wrap_corr!","text":"wrap_corr!(nav::Array{Float64, 4}, wrapped_points::Array{Int8, 2}, correlation::Union{Array{Float64, 1}, Matrix{Float64}}, slices::Int64)\n\nUnwrap the wrapped points identified with the find_wrapped funtion. These functions can be used only if physiological recording is available.\n\nArguments\n\nnav::Array{T, 4} - phase estimates obtained from the navigator data\nwrapped_points::Array{Int8, 2} - position of the wrapped points, output of find_wrapped\ncorrelation::Union{Array{Float64, 1} - correlation values between the physiological recording the navigator estimates for each slice. Output of find_wrapped\nslices::Int64 - number of slices\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.find_wrapped","page":"API","title":"MRINavigator.find_wrapped","text":"find_wrapped(nav::Array{Float64, 4}, nav_time::Array{Float64, 2}, trace::Array{Float64, 2}, slices::Int64)\n\nIdentify the position of the wrapped points in the navigator phase estimates. The respiratory belt recording is necessary. Return the position of the wrapped points and the correlation between each navigator slice and the trace data.\n\nArguments\n\nnav::Array{Float64, 4}      - navigator phase estimates\nnav_time::Array{Float64, 2} - navigator data time stamps in ms from the beginning of the day, for each slice\ntrace::Array{Float64, 2}    - physiological trace recording. Two columns vector (1:time [ms], 2:trace). The first column contains the time stamps in ms from the beginning of the day.                                   Include time points before and after the image acquisition (at least 2 s).\nslices::Int64               - number of slices\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.TE_corr!","page":"API","title":"MRINavigator.TE_corr!","text":"nav = TE_corr!(nav::Array{T, 4}, acqd::AcquisitionData, dt_nav::Float64, TE_nav::Float64, numsamples::Int64, numechoes::Int64) where {T}\n\nCompute the phase value for the navigator correction basing on the exact acquisition time of each data sample in the line and for each echo. Return a four dimensional navigator array.\n\nArguments\n\nnav::Array{T, 4} - phase estimates obtained from the navigator data\nacqData::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\ndt_nav::Float64 - time interval between two samples in the frequency encoding direction\nTE_nav::Float64 - echo time of the navigator readout\nnumsamples::Int64 - number of samples for each profile\nnumechoes::Int64 - number of echoes\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.apply_corr!","page":"API","title":"MRINavigator.apply_corr!","text":"apply_corr!(nav::Array{T, 4}, acqd::AcquisitionData, numechoes::Int64, numlines::Int64, numsamples::Int64, numslices::Int64) where {T}\n\nApply the navigator-based correction to the acquisition data structure obtained loading the raw data with MRIReco.jl. After applying the correction the image should be reconstructed. Use the reconstruct function.\n\nArguments\n\nnav::Array{T, 4} - phase estimates obtained from the navigator data\nacqd::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nnumechoes::Int64 - number of echoes\nnumlines::Int64 - number of lines (profiles) for each slice and echo\nnumsamples::Int64 - number of samples for each profile\nnumslices::Int64 - number of slices\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#Adjust-data","page":"API","title":"Adjust data","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":" MRINavigator.OrderSlices!\n MRINavigator.ExtractFlags\n MRINavigator.ExtractNoiseData!\n MRINavigator.ReverseBipolar!\n MRINavigator.RemoveRef!\n MRINavigator.CopyTE!\n MRINavigator.AdjustSubsampleIndices!\n MRINavigator.ExtractNavigator\n MRINavigator.selectEcho!\n MRINavigator.selectSlice!\n MRINavigator.additionalNavInput","category":"page"},{"location":"API/#MRINavigator.OrderSlices!","page":"API","title":"MRINavigator.OrderSlices!","text":"OrderSlices!(rawData::RawAcquisitionData)\n\nSpatially order the slices in the MRIReco.jl raw data structure. The slices are ordered basing on the position coordinates saved in each profile. If these are not present the slices can not be ordered.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ExtractFlags","page":"API","title":"MRINavigator.ExtractFlags","text":"flags = ExtractFlags(rawData::RawAcquisitionData)\n\nExtract the acquisition flags from the MRIReco.jl raw data profiles. Return a 31 elements vector for each profile.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ExtractNoiseData!","page":"API","title":"MRINavigator.ExtractNoiseData!","text":"noisemat = ExtractNoiseData!(rawData::RawAcquisitionData, flags::Array{Int64})\n\nExtract and return the noise acquisition from the MRIReco.jl raw data. The noise acquisition is usually the first profile with slice = 0, contrast = 0, repetition = 0. The noise profile should have the 19th flag element qual to 1. Check with ExtractFlags if errors occur.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ReverseBipolar!","page":"API","title":"MRINavigator.ReverseBipolar!","text":"ReverseBipolar!(rawData::RawAcquisitionData)\n\nReflect the MRIReco.jl raw data profiles for bipolar acquisition.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.RemoveRef!","page":"API","title":"MRINavigator.RemoveRef!","text":"RemoveRef!(rawData::RawAcquisitionData, slices::Union{Vector{Int64}, Nothing}, echoes::Union{Vector{Int64}, Nothing})\n\nRemove reference data that are not useful for the navigator-based correction from acquisitions with phase stabilization on Siemens scanners. Make sure that this is needed on your data checking the time stamps with mapVBVD in Matlab. Not solid to recalls.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792 mapVBVD reference: https://github.com/CIC-methods/FID-A/blob/master/inputOutput/mapVBVD/README.md\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.CopyTE!","page":"API","title":"MRINavigator.CopyTE!","text":"CopyTE!(rawData::RawAcquisitionData, acqData::AcquisitionData)\n\nCopy the TE values from the MRIReco.jl raw data structure to the acquisition data structure.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\nacqData::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.AdjustSubsampleIndices!","page":"API","title":"MRINavigator.AdjustSubsampleIndices!","text":"AdjustSubsampleIndices!(acqData::AcquisitionData)\n\nAdd subsamples indices in the MRIReco.jl acquisition data structure. Needed when conveting data not acquired in the first repetition.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nacqData::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.ExtractNavigator","page":"API","title":"MRINavigator.ExtractNavigator","text":"(nav, nav_time) = ExtractNavigator(rawData::RawAcquisitionData, slices::Union{Vector{Int64}, Nothing})\n\nExtract the navigator profiles from the MRIReco.jl raw data structure. These are registered with the same indices (contract, slice, encoding step) as the image data for the first echo time. Return a navigator array and a navigator time array. The navigator array has four dimensions in order: k-space samples, coils, k-space lines, slices. Effective only if the navigator profile was acquired after the first image profile.\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\nArguments\n\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.selectEcho!","page":"API","title":"MRINavigator.selectEcho!","text":"SelectEcho!(acqd, idx_echo)\n\nExtract one or more echoes from the acquisition data structure\n\nArguments\n\nacqd::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nidx_echo::Vector{Int64} - vector containing the indexes of the echoes to be selected (starting from 0)\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.selectSlice!","page":"API","title":"MRINavigator.selectSlice!","text":"SelectSlice!(acqd, nav, nav_time, idx_slice)\n\nExtract one or more echoes from the acquisition data structure\n\nArguments\n\nacqd::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\nidx_slice::Vector{Int64} - vector containing the indexes of the slices to be selected (starting from 0, downer slice)\n\nOptional arguments with default value = nothing\n\nnav::Union{Array{Complex{T}, 4}, Nothin} = nothing - navigator profiles obtained with the ExtractNavigator function\nnav_time::Union{Array{Complex{Float32}, 2}, Nothing} - time stamps for the navigator data obtained with ExtractNavigator (in ms from the beginning of the day)\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"function"},{"location":"API/#MRINavigator.additionalNavInput","page":"API","title":"MRINavigator.additionalNavInput","text":"Data = additionalNavInput(\n    noisemat::Array{Complex{Float32}, 2},\n    rawData::RawAcquisitionData,\n    acqData::AcquisitionData,\n    acqMap::Union{AcquisitionData, Nothing} = nothing,\n    nav_time::Union{Array{Complex{Float32}, 2}, Nothing} = nothing,\n    trace::Union{Matrix{Float64}, Nothing} = nothing,\n    centerline::Union{Vector{Float64}, Nothing} = nothing)\n\nConstruct the additional data structure that is needed as imput to navCorr!\n\nArguments\n\nnoisemat::Array{Complex{Float32}, 2} - noise data obtained with ExtractNoiseData!\nrawData::RawAcquisitionData - raw data structure obtained loading raw data with MRIReco.jl\nacqData::AcquisitionData - acquisition data structure obtained converting raw data with MRIReco.jl\n\nOptional arguments with default value = nothing\n\nacqMap::Union{AcquisitionData, Nothing} = nothing       - acquisition data structure obtained converting reference data with MRIReco.jl\nnav_time::Union{Array{Complex{Float32}, 2}, Nothing}    - time stamps for the navigator data obtained with ExtractNavigator (in ms from the beginning of the day)\ntrace::Union{Matrix{Float64}, Nothing}                  - respiratory trace time stamps and values in matrix with two colunms (1:time [ms], 2:trace).                                                               Include time points before and after the image acquisition (at least 2 s).\ncenterline::Union{Vector{Float64}, Nothing}             - coordinates of the spinal cord ceterline obtained with callSCT\n\nMRIReco reference: https://onlinelibrary.wiley.com/doi/epdf/10.1002/mrm.28792\n\n\n\n\n\n","category":"type"}]
}
